@top Input { Items }

// macros

sepBy<content, sep> {
	"" | content (sep content?)*
}

// Similar to `sepEndBy1`
sepBy1<content, sep> {
  content (sep content?)*
}

commaSep<content> {
  sepBy<content, ",">
}

commaSep1<content> {
	sepBy1<content, ",">
}

kw<term> { @specialize[@name={term}]<Identifier, term> }

// grammar

Items {
  (Item)*
}

Item {
  HeaderBlock { Header Block }
  | LayoutStages { kw<"layout">  "="  StageList }
}

StageList {
	"[" commaSep1<Stage> "]"
}

Stage {
	Identifier
}

Header {
  Selector
  | Namespace
  | Collector
}

// Selector rules

Selector {
  kw<"forall"> kw<"repeatable">? DeclList (
		Where? With?
		| With? Where?
	)
}

Where { kw<"where"> RelationList }

With { kw<"with"> DeclList }

Foreach { kw<"foreach"> DeclList }

Namespace { Identifier }

DeclList { sepBy1<DeclPattern, semi> }

DeclPattern { SelType commaSep1<Variable> }

Decl { SelType Variable }

SelType { Identifier }
Variable {
	StyVar { Identifier }
	| SubVar { "`" Identifier "`" }
}

RelationList { sepBy1<Relation, ";"> }

Relation { Bind | Pred | Field }

Bind { Variable ":=" RelExpr }

Pred {Identifier "(" Args ")" As?}

As { kw<"as"> Identifier }

RelExpr { Func | Arg }

Func { Identifier "(" commaSep<RelExpr> ")" }

Arg { Variable | Literal }

Literal { Number | String }

Args { sepBy1<Arg, ","> }

Field { Variable kw<"has"> FieldDesc? Identifier}

FieldDesc { @extend<Identifier, "math"> | @extend<Identifier, "text"> }

// collector rules

Collector {
	kw<"collect"> kw<"repeatable">? Decl Into (
		Where? With? Foreach? |
		Where? Foreach? With? |
		With? Where? Foreach? |
		With? Foreach? Where? |
		Foreach? Where? With? |
		Foreach? With? Where?
	)
}

Into { kw<"into"> Identifier }

// block rules

Block { "{" sepBy<Statement, semi> "}" }
Statement { Delete | Override | Assign | AnonExpr }
Delete { kw<"delete"> Path }
Override { kw<"override"> Path "=" AssignExpr }
Assign { 
	Type? Path "=" AssignExpr 
}
Type {
	@extend<Identifier,
		("scalar" |
		"int" |
		"bool" |
		"string" |
		"path" |
		"color" |
		"file" |
		"style" |
		"shape" | 
		"list" |
		"vec2" |
		"vec3" |
		"vec4" |
		"mat2x2" |
		"mat3x3" |
		"mat4x4" |
		"function" |
		"objective" |
		"constraint" )
	>
}
@precedence {Path, Type}

Path { Variable ("." Identifier)* AccessOps? }
AccessOps { AccessOp (AccessOp)* }
AccessOp { "[" Expr "]" }

// expression rules
AnonExpr { Layering | Objective | Constraint | ShapeDecl }
AssignExpr { Expr | Layering | Objective | Constraint | ShapeDecl }

Expr { 
	BooleanLiteral |
	ColorLiteral |
	String |
	AnnotatedFloat |
	ComputationFunction |
	StyVarExpr |
	Path |
	List |
	Tuple |
	Vector
	// BinaryExpression { Expr BinOp Expr } 
}

AnnotatedFloat { "?" | Number } 
ComputationFunction { Identifier "(" commaSep<Expr> ")" }
StyVarExpr {
	kw<"listof"> Identifier kw<"from"> Identifier |
	(kw<"numberof"> | kw<"nameof">) Identifier
}
List { "[" commaSep<Expr> "]" }
Tuple { "{" Expr "," Expr "}" }
Vector { "(" commaSep1<Expr> ")" }
Layering { 
	kw<"layer">? Path (kw<"above"> | kw<"below">) commaSep1<Path> 
}
Objective {
	kw<"encourage"> ObjConstrBody
}
Constraint {
	kw<"ensure"> ObjConstrBody
}
ObjConstrBody {
	// function call
	Identifier "(" commaSep<Expr> ")" |
	// comparison expr
	Expr CompareOp Expr 
}
ShapeDecl {
	ShapeName "{" PropertyDecl* "}"
}
ShapeName { Identifier }
PropertyDecl { PropName ":" Expr semi }
PropName { Identifier }

// skips and tokens 


@skip {} {
	BlockComment { "/*" (blockCommentContent | blockCommentNewline)* blockCommentEnd }
}
	
@skip { spaces | newline | LineComment 
	| BlockComment 
}

// handle block comment content
@local tokens {
  blockCommentEnd { "*/" }
  blockCommentNewline { "\n" }
  @else blockCommentContent
}


@tokens {
	hex { @digit | $[a-fA-F] }
	stringContentDouble { ![\\\n"]+ }
	identifierChar { @asciiLetter | $[_$\u{a1}-\u{10ffff}] }
  word { identifierChar (identifierChar | @digit)* }
	newline[@export] { $[\r\n] }
  spaces[@export] { $[ \t]+ }
	BooleanLiteral { "true" | "false" }
  Identifier { word }

	@precedence{ BooleanLiteral, Identifier }
	LineComment { "--" ![\n]* }
  eof { @eof }
	Number {
		(@digit ("_" | @digit)* ("." ("_" | @digit)*)? | "." @digit ("_" | @digit)*)
			(("e" | "E") ("+" | "-")? ("_" | @digit)+)?
	}

	String {
		'"' (stringContentDouble | Escape)* ('"' | "\n") 
		// "'" (stringContentSingle | Escape)* ("'" | "\n")
	}
	Escape {
		"\\" ("x" hex hex | "u" ("{" hex+ "}" | hex hex hex hex) | ![xu])
	}
  ColorLiteral { "#" hex hex hex (hex (hex hex (hex hex)?)?)?  }
	"."
	"("[@name=LParen]
	")"[@name=RParen]
	":="[@name=Bind]
	BinOp { $[+\-*/] | ".*" | "./" | "then" }
	CompareOp { "<" | "==" | ">" }


	@precedence { Number "." }
}


// https://lezer.codemirror.net/examples/javascript/
// Because other tokens should take precedence over inserted semicolons (JavaScript only inserts semicolons when it can't otherwise proceed its parse), the declaration for this external tokenizer has to appear after the other tokenizers.
@external tokens insertSemicolon from "./styleTokens.js" { insertSemi }
@context trackNewline from "./styleTokens.js"
semi { ";" | insertSemi }


